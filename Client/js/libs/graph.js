// Generated by CoffeeScript 1.9.3
(function() {
  var $, Chart, Graph, bluebird, client, db, example, log, redis, trim_push;

  $ = require("jquery");

  redis = require('redis');

  client = redis.createClient(db = "0");

  bluebird = require('bluebird');

  Chart = require('chart.js');

  bluebird.promisifyAll(redis.RedisClient.prototype);

  bluebird.promisifyAll(redis.Multi.prototype);

  log = console.log;

  trim_push = function(array, value, size) {
    while (array.length >= size) {
      array.shift();
    }
    return array.push(value);
  };

  
get_value = function( key ) {
  client.getAsync( key ).then(function(res) {
    console.log( "res: " + res  )
    return res;
  });
}
;

  Graph = (function() {
    function Graph(id) {
      var stats;
      this.id = id;
      this.init_dom_element();
      stats = {
        type: 'line',
        data: {
          labels: ['70ms', '60ms', '50ms', '40ms', '30ms', '20ms', '10ms'],
          datasets: [
            {
              label: 'apples',
              data: [12, 19, 3, 17, 6, 3, 7],
              backgroundColor: "rgba(153,255,51,0.4)"
            }, {
              label: 'oranges',
              data: [2, 29, 5, 5, 2, 3, 10],
              backgroundColor: "rgba(255,153,0,0.4)"
            }
          ]
        },
        options: {
          responsive: false
        }
      };
      this.chart = new Chart( this.ctx, stats );;
      this.chart_data = this.chart.data.datasets[0].data;
      this.init_update_iteration(500);
    }

    Graph.prototype.init_dom_element = function() {
      this.element = document.createElement('canvas');
      $(this.element).attr("id", this.id).attr("width", "500px").attr("height", "500px").appendTo('.contents');
      return this.ctx = this.element.getContext('2d');
    };

    Graph.prototype.init_update_iteration = function(time) {
      var chart;
      chart = this.chart;
      return window.setInterval(function() {
        var next;
        log("NFN: " + get_value);
        next = get_value('graph-test');
        log("New Val: " + next);
        return client.getAsync('graph-test').then(function(res) {
          console.log("res: " + res);
          trim_push(chart.data.datasets[0].data, res, 7);
          return chart.update();
        });
      }, time);
    };

    return Graph;

  })();

  example = new Graph("testgraphid", "Test");

}).call(this);
